From db8f8cff934bd78492bed4c2a2604c9ca36ce519 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Matthias=20G=C3=B6rgens?= <matthias.goergens@gmail.com>
Date: Thu, 18 Aug 2022 09:53:56 +0800
Subject: [PATCH] Move machinery for skipping empty entries to dict

For better encapsulation, we move all the machinery for skipping empty
entries into the dict code itself.
---
 Include/cpython/dictobject.h | 12 +++++++++++-
 Modules/_functoolsmodule.c   | 28 +++++++---------------------
 Objects/dictobject.c         | 15 ++++++++++++---
 3 files changed, 30 insertions(+), 25 deletions(-)

diff --git a/Include/cpython/dictobject.h b/Include/cpython/dictobject.h
index a699c96548..e8588c9779 100644
--- a/Include/cpython/dictobject.h
+++ b/Include/cpython/dictobject.h
@@ -28,6 +28,15 @@ typedef struct {
     PyDictValues *ma_values;
 } PyDictObject;
 
+/*
+ * A 'finger' to allow deletion of oldest entries in amortised O(1).
+ * TODO: Does this need to be even more encapsulated and hidden?
+ */
+typedef struct {
+    PyDictKeysObject *sentinel;
+    Py_ssize_t skip_empty;
+} PyDictFinger;
+
 PyAPI_FUNC(PyObject *) _PyDict_GetAndPushBack_KnownHash(
     PyObject *op, PyObject *key, Py_hash_t hash);
 PyAPI_FUNC(PyObject *) _PyDict_GetItem_KnownHash(PyObject *mp, PyObject *key,
@@ -44,7 +53,8 @@ PyAPI_FUNC(int) _PyDict_DelItem_KnownHash(PyObject *mp, PyObject *key,
                                           Py_hash_t hash);
 PyAPI_FUNC(int) _PyDict_DelItemIf(PyObject *mp, PyObject *key,
                                   int (*predicate)(PyObject *value));
-PyAPI_FUNC(int) _PyDict_DelNext(PyDictObject *, Py_ssize_t *);
+PyAPI_FUNC(PyDictFinger) _PyDict_NewFinger(void);
+PyAPI_FUNC(int) _PyDict_DelOldest(PyDictObject *mp, PyDictFinger *finger);
 PyAPI_FUNC(int) _PyDict_Next(
     PyObject *mp, Py_ssize_t *pos, PyObject **key, PyObject **value, Py_hash_t *hash);
 
diff --git a/Modules/_functoolsmodule.c b/Modules/_functoolsmodule.c
index fe1c0b6355..67309cf15f 100644
--- a/Modules/_functoolsmodule.c
+++ b/Modules/_functoolsmodule.c
@@ -755,13 +755,8 @@ typedef PyObject *(*lru_cache_ternaryfunc)(struct lru_cache_object *, PyObject *
 
 typedef struct lru_cache_object {
     PyObject_HEAD
-    /* To allow amortised O(1) deletion of old entries, instead of O(n),
-       we skip known deleted entries when scanning for the oldest entry
-       to delete.
-    */
-    Py_ssize_t first_active_entry;
-    /* to detect resizes. Cf. odictobject.c */
-    void *cache_resize_sentinel;
+    /* Speeds up deletion of oldest entry */
+    PyDictFinger finger;
     lru_cache_ternaryfunc wrapper;
     int typed;
     PyObject *cache;
@@ -967,14 +960,8 @@ bounded_lru_cache_wrapper(lru_cache_object *self, PyObject *args, PyObject *kwds
 
     while (PyDict_GET_SIZE(self->cache) > self->maxsize)
     {
-        if (self->cache_resize_sentinel != ((PyDictObject *)self->cache)->ma_keys) {
-            // Resize happened, so reset first_active_entry
-            self->cache_resize_sentinel = ((PyDictObject *)self->cache)->ma_keys;
-            self->first_active_entry = 0;
-        }
-        // This does a decref and might potentially execute arbitrary code,
-        // but we restore our invariant at the start of the loop body.
-        _PyDict_DelNext((PyDictObject *)self->cache, &self->first_active_entry);
+        // This does a decref and thus might potentially execute arbitrary code.
+        _PyDict_DelOldest((PyDictObject *)self->cache, &self->finger);
     }
 
     Py_DECREF(key);
@@ -1040,8 +1027,7 @@ lru_cache_new(PyTypeObject *type, PyObject *args, PyObject *kw)
         return NULL;
     }
 
-    obj->first_active_entry = 0;
-    obj->cache_resize_sentinel = NULL;
+    obj->finger = _PyDict_NewFinger();
     obj->wrapper = wrapper;
     obj->typed = typed;
     obj->cache = cachedict;
diff --git a/Objects/dictobject.c b/Objects/dictobject.c
index 7f7360bf35..cb1079b952 100644
--- a/Objects/dictobject.c
+++ b/Objects/dictobject.c
@@ -2178,16 +2178,25 @@ _PyDict_Next(PyObject *op, Py_ssize_t *ppos, PyObject **pkey,
     return 1;
 }
 
+PyAPI_FUNC(PyDictFinger) _PyDict_NewFinger() {
+    return (PyDictFinger) {.sentinel = NULL, .skip_empty = 0};
+}
+
 int
-_PyDict_DelNext(PyDictObject *mp, Py_ssize_t *ppos)
+_PyDict_DelOldest(PyDictObject *mp, PyDictFinger *finger)
 {
     PyObject *key, *value;
     Py_hash_t hash;
 
-    if(!_PyDict_Next((PyObject *)mp, ppos, &key, &value, &hash)) {
+    if(finger->sentinel != mp->ma_keys) {
+        finger->sentinel = mp->ma_keys;
+        finger->skip_empty = 0;
+    }
+
+    if(!_PyDict_Next((PyObject *)mp, &finger->skip_empty, &key, &value, &hash)) {
         return -1;
     }
-    return delitem_common(mp, hash, *ppos-1, value);
+    return delitem_common(mp, hash, finger->skip_empty-1, value);
 }
 
 /*
